{"version":3,"sources":["store/action.js","store/slices/songsSlice.js","store/slices/moviesSlice.js","store/index.js","components/MoviePlaylist.js","data/index.js","components/SongPlaylist.js","App.js","index.js"],"names":["reset","createAction","songSlice","createSlice","name","initialState","reducers","addSong","state","action","push","payload","removeSong","index","indexOf","splice","extraReducers","builder","addCase","_songSlice$actions","actions","songsReducer","reducer","moviesSlice","addMovie","removeMovie","_moviesSlice$actions","movieReducer","store","configureStore","songs","movies","MoviePlaylist","diapatch","useDispatch","renderedMovies","useSelector","map","movie","_jsxs","children","_jsx","onClick","handleMovieRemove","className","concat","faker","word","adjective","noun","SongPlaylist","dispatch","renderedSongs","song","handleSongRemove","music","songName","App","rootElement","document","getElementById","createRoot","render","Provider"],"mappings":"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","file":"static/js/main.0671edee.chunk.js","sourcesContent":["import { createAction } from \"@reduxjs/toolkit\";\r\nexport const reset = createAction(\"app/reset\");\r\n","import { createSlice } from \"@reduxjs/toolkit\";\r\nimport { reset } from \"../action\";\r\nconst songSlice = createSlice({\r\n  name: \"song\",\r\n  initialState: [],\r\n  reducers: {\r\n    addSong(state, action) {\r\n      state.push(action.payload);\r\n    },\r\n    removeSong(state, action) {\r\n      //\r\n      const index = state.indexOf(action.payload);\r\n      state.splice(index, 1);\r\n    }\r\n  },\r\n  extraReducers(builder) {\r\n    builder.addCase(reset, (state, action) => {\r\n      return [];\r\n    });\r\n  }\r\n});\r\n\r\nexport const { addSong, removeSong } = songSlice.actions;\r\n\r\nexport const songsReducer = songSlice.reducer;\r\n","import { createSlice } from \"@reduxjs/toolkit\";\r\nimport { reset } from \"../action\";\r\nconst moviesSlice = createSlice({\r\n  name: \"movie\",\r\n  initialState: [],\r\n  reducers: {\r\n    addMovie(state, action) {\r\n      //\r\n      state.push(action.payload);\r\n    },\r\n    removeMovie(state, action) {\r\n      const index = state.indexOf(action.payload);\r\n      state.splice(index, 1);\r\n    }\r\n  },\r\n  extraReducers(builder) {\r\n    builder.addCase(reset, (state, action) => {\r\n      return [];\r\n    });\r\n  }\r\n});\r\nexport const { addMovie, removeMovie } = moviesSlice.actions;\r\nexport const movieReducer = moviesSlice.reducer;\r\n","import { configureStore } from \"@reduxjs/toolkit\";\r\nimport { songsReducer, addSong, removeSong } from \"./slices/songsSlice\";\r\nimport { movieReducer, addMovie, removeMovie } from \"./slices/moviesSlice\";\r\nimport { reset } from \"./action\";\r\nconst store = configureStore({\r\n  reducer: {\r\n    songs: songsReducer,\r\n    movies: movieReducer\r\n  }\r\n});\r\nexport { store };\r\nexport { reset, addSong, removeSong, addMovie, removeMovie };\r\n\r\n// console.log(songSlice.actions.addSong());\r\n\r\n// const startingState = store.getState();\r\n// console.log(JSON.stringify(startingState));\r\n\r\n// store.dispatch(songSlice.actions.addSong(\"some Song\"));\r\n\r\n// const finalState = store.getState();\r\n// console.log(JSON.stringify(finalState));\r\n","import { useDispatch, useSelector } from \"react-redux\";\nimport { createRandomMovie } from \"../data\";\nimport { addMovie, removeMovie } from \"../store\";\nfunction MoviePlaylist() {\n  // To Do:\n  const diapatch = useDispatch();\n  // Get list of movies\n  const moviePlaylist = useSelector((state) => {\n    return state.movies;\n  });\n\n  const handleMovieAdd = (movie) => {\n    // To Do:\n    // Add movie to list of movies\n    diapatch(addMovie(movie));\n  };\n  const handleMovieRemove = (movie) => {\n    // To Do:\n    // Remove movie from list of movies\n    diapatch(removeMovie(movie));\n  };\n\n  const renderedMovies = moviePlaylist.map((movie) => {\n    return (\n      <li key={movie}>\n        {movie}\n        <button\n          onClick={() => handleMovieRemove(movie)}\n          className=\"button is-danger\"\n        >\n          X\n        </button>\n      </li>\n    );\n  });\n\n  return (\n    <div className=\"content\">\n      <div className=\"table-header\">\n        <h3 className=\"subtitle is-3\">Movie Playlist</h3>\n        <div className=\"buttons\">\n          <button\n            onClick={() => handleMovieAdd(createRandomMovie())}\n            className=\"button is-link\"\n          >\n            + Add Movie to Playlist\n          </button>\n        </div>\n      </div>\n      <ul>{renderedMovies}</ul>\n    </div>\n  );\n}\n\nexport default MoviePlaylist;\n","import { faker } from \"@faker-js/faker/locale/en\";\n\n// This file has nothing to do with Redux\n// It exports functions that create random\n// movies and song\n\nexport const createRandomMovie = () => {\n  return `${faker.word.adjective()} ${faker.word.noun()}`;\n};\n\nexport const createRandomSong = () => {\n  return faker.music.songName();\n};\n","import { useDispatch, useSelector } from \"react-redux\";\nimport { createRandomSong } from \"../data\";\nimport { addSong, removeSong } from \"../store\";\nfunction SongPlaylist() {\n  const dispatch = useDispatch();\n  // To Do:\n  // Get list of songs\n  const songPlaylist = useSelector((state) => {\n    return state.songs;\n  });\n\n  const handleSongAdd = (song) => {\n    dispatch(addSong(song));\n    // To Do:\n    // Add song to list of songs\n  };\n  const handleSongRemove = (song) => {\n    dispatch(removeSong(song));\n  };\n\n  const renderedSongs = songPlaylist.map((song) => {\n    return (\n      <li key={song}>\n        {song}\n        <button\n          onClick={() => handleSongRemove(song)}\n          className=\"button is-danger\"\n        >\n          X\n        </button>\n      </li>\n    );\n  });\n\n  return (\n    <div className=\"content\">\n      <div className=\"table-header\">\n        <h3 className=\"subtitle is-3\">Song Playlist</h3>\n        <div className=\"buttons\">\n          <button\n            onClick={() => handleSongAdd(createRandomSong())}\n            className=\"button is-link\"\n          >\n            + Add Song to Playlist\n          </button>\n        </div>\n      </div>\n      <ul>{renderedSongs}</ul>\n    </div>\n  );\n}\n\nexport default SongPlaylist;\n","import \"./styles.css\";\nimport MoviePlaylist from \"./components/MoviePlaylist\";\nimport SongPlaylist from \"./components/SongPlaylist\";\nimport { useDispatch } from \"react-redux\";\nimport { reset } from \"./store\";\nexport default function App() {\n  const dispatch = useDispatch();\n  const handleResetClick = () => {\n    //\n    dispatch(reset());\n  };\n\n  return (\n    <div className=\"container is-fluid\">\n      <button onClick={() => handleResetClick()} className=\"button is-danger\">\n        Reset Both Playlists\n      </button>\n      <hr />\n      <MoviePlaylist />\n      <hr />\n      <SongPlaylist />\n    </div>\n  );\n}\n","import \"bulma/css/bulma.css\";\nimport { createRoot } from \"react-dom/client\";\nimport { Provider } from \"react-redux\";\nimport App from \"./App\";\nimport { store } from \"./store\";\n\nconst rootElement = document.getElementById(\"root\");\nconst root = createRoot(rootElement);\n\nroot.render(\n  <Provider store={store}>\n    <App />\n  </Provider>\n);\n"],"sourceRoot":""}